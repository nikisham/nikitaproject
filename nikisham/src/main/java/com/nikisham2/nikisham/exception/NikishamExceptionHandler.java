package com.nikisham2.nikisham.exception;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.lang.Nullable;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.ServletWebRequest;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import javax.persistence.PersistenceException;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.net.UnknownHostException;
import java.util.Objects;
import java.util.concurrent.ExecutionException;
import java.util.stream.Collectors;

@Slf4j
@ControllerAdvice
@RequiredArgsConstructor
public class NikishamExceptionHandler extends ResponseEntityExceptionHandler {
    private static final ObjectMapper mapper = new ObjectMapper();
    private static final String FORMAT = "{\"error\":\"%s\"}";


    @ExceptionHandler({ExecutionException.class})
    public ResponseEntity<Object> handleExecutionException(ExecutionException ex, WebRequest request) {
        if (Objects.nonNull(ex.getCause())) {
            return handleExceptionInternal(ex, formatError(ex.getCause().getMessage()),
                    new HttpHeaders(), HttpStatus.BAD_REQUEST, request);
        }
        return handleServiceException(ex, request);
    }

    @ExceptionHandler({PersistenceException.class, InterruptedException.class,
            IllegalArgumentException.class, RuntimeException.class, IOException.class,})
    public ResponseEntity<Object> handleServiceException(Exception ex, WebRequest request) {
        return handleExceptionInternal(ex, formatError(ex.getMessage()),
                new HttpHeaders(), HttpStatus.BAD_REQUEST, request);
    }

    @ExceptionHandler(UnknownHostException.class)
    public void handleUnknownHostException(HttpServletRequest request) {
        final String message = "UnknownHostException generated by request {} {} from remote address {}";
        log.warn(message, request.getMethod(), request.getRequestURL(), request.getRemoteAddr());
    }

    @SuppressWarnings("NullableProblems")
    @Override
    protected ResponseEntity<Object> handleMethodArgumentNotValid(
            MethodArgumentNotValidException ex,
            HttpHeaders headers,
            HttpStatus status,
            WebRequest request
    ) {
        final var value = ex.getBindingResult().getFieldErrors().stream()
                .map(error -> error.getField() + ": " + error.getDefaultMessage())
                .collect(Collectors.joining(";"));
        return handleExceptionInternal(ex, formatError(value),
                new HttpHeaders(), status, request);
    }

    @SuppressWarnings("NullableProblems")
    @Override
    protected ResponseEntity<Object> handleExceptionInternal(
            Exception ex,
            @Nullable Object body,
            HttpHeaders headers,
            HttpStatus status,
            WebRequest request
    ) {
        log.warn("Exception: {},\t\n request: {},\t\n result: {}",
                ex.getMessage(), ((ServletWebRequest) request).getRequest().getRequestURI(),
                body);
        return super.handleExceptionInternal(ex, body, headers, status, request);
    }

    private String formatError(String value) {
        try {
            return mapper.writeValueAsString(new ErrorMessage(value));
        } catch (JsonProcessingException e) {
            return String.format(FORMAT, value);
        }
    }

    private record ErrorMessage(String error) {
    }
}
